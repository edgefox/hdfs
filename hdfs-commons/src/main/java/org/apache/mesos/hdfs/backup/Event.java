package org.apache.mesos.hdfs.backup;

import org.apache.hadoop.fs.XAttr;
import org.apache.hadoop.fs.permission.AclEntry;
import org.apache.hadoop.fs.permission.FsPermission;
import org.apache.hadoop.hdfs.inotify.Event.CreateEvent.INodeType;
import org.apache.hadoop.hdfs.inotify.Event.EventType;
import org.apache.hadoop.hdfs.inotify.Event.MetadataUpdateEvent.MetadataType;

import java.util.List;
public abstract class Event {
    private EventType eventType;

    public EventType getEventType() {
        return eventType;
    }

    public Event(EventType eventType) {
        this.eventType = eventType;
    }

    /**
     * Sent when a file is closed after append or create.
     */
    public static class CloseEvent extends Event {
        private String path;
        private long fileSize;
        private long timestamp;

        public CloseEvent() {
            super(EventType.CLOSE);
        }
        
        public CloseEvent(org.apache.hadoop.hdfs.inotify.Event.CloseEvent closeEvent) {
            super(EventType.CLOSE);
            path = closeEvent.getPath();
            fileSize = closeEvent.getFileSize();
            timestamp = closeEvent.getTimestamp();
        }

        public String getPath() {
            return path;
        }

        /**
         * The size of the closed file in bytes. May be -1 if the size is not
         * available (e.g. in the case of a close generated by a concat operation).
         */
        public long getFileSize() {
            return fileSize;
        }

        /**
         * The time when this event occurred, in milliseconds since the epoch.
         */
        public long getTimestamp() {
            return timestamp;
        }
    }

    /**
     * Sent when a new file is created (including overwrite).
     */
    public static class CreateEvent extends Event {

        private INodeType iNodeType;
        private String path;
        private long ctime;
        private int replication;
        private String ownerName;
        private String groupName;
        private FsPermission perms;
        private String symlinkTarget;
        private boolean overwrite;
        private long defaultBlockSize;

        public INodeType getiNodeType() {
            return iNodeType;
        }

        public CreateEvent() {
            super(EventType.CREATE);
        }
        
        public CreateEvent(org.apache.hadoop.hdfs.inotify.Event.CreateEvent createEvent) {
            super(EventType.CREATE);
            iNodeType = createEvent.getiNodeType();
            path = createEvent.getPath();
            ctime = createEvent.getCtime();
            replication = createEvent.getReplication();
            ownerName = createEvent.getOwnerName();
            groupName = createEvent.getGroupName();
            perms = createEvent.getPerms();
            symlinkTarget = createEvent.getSymlinkTarget();
            overwrite = createEvent.getOverwrite();
            defaultBlockSize = createEvent.getDefaultBlockSize();
        }

        public String getPath() {
            return path;
        }

        /**
         * Creation time of the file, directory, or symlink.
         */
        public long getCtime() {
            return ctime;
        }

        /**
         * Replication is zero if the CreateEvent iNodeType is directory or symlink.
         */
        public int getReplication() {
            return replication;
        }

        public String getOwnerName() {
            return ownerName;
        }

        public String getGroupName() {
            return groupName;
        }

        public FsPermission getPerms() {
            return perms;
        }

        /**
         * Symlink target is null if the CreateEvent iNodeType is not symlink.
         */
        public String getSymlinkTarget() {
            return symlinkTarget;
        }

        public boolean getOverwrite() {
            return overwrite;
        }

        public long getDefaultBlockSize() {
            return defaultBlockSize;
        }
    }

    /**
     * Sent when there is an update to directory or file (none of the metadata
     * tracked here applies to symlinks) that is not associated with another
     * inotify event. The tracked metadata includes atime/mtime, replication,
     * owner/group, permissions, ACLs, and XAttributes. Fields not relevant to the
     * metadataType of the MetadataUpdateEvent will be null or will have their default
     * values.
     */
    public static class MetadataUpdateEvent extends Event {
        private String path;
        private MetadataType metadataType;
        private long mtime;
        private long atime;
        private int replication;
        private String ownerName;
        private String groupName;
        private FsPermission perms;
        private List<AclEntry> acls;
        private List<XAttr> xAttrs;
        private boolean xAttrsRemoved;

        public MetadataUpdateEvent() {
            super(EventType.APPEND);
        }
        
        public MetadataUpdateEvent(org.apache.hadoop.hdfs.inotify.Event.MetadataUpdateEvent metadataUpdateEvent) {
            super(EventType.METADATA);
            path = metadataUpdateEvent.getPath();
            metadataType = metadataUpdateEvent.getMetadataType();
            mtime = metadataUpdateEvent.getMtime();
            atime = metadataUpdateEvent.getAtime();
            replication = metadataUpdateEvent.getReplication();
            ownerName = metadataUpdateEvent.getOwnerName();
            groupName = metadataUpdateEvent.getGroupName();
            perms = metadataUpdateEvent.getPerms();
            acls = metadataUpdateEvent.getAcls();
            xAttrs = metadataUpdateEvent.getxAttrs();
            xAttrsRemoved = metadataUpdateEvent.isxAttrsRemoved();
        }

        public String getPath() {
            return path;
        }

        public MetadataType getMetadataType() {
            return metadataType;
        }

        public long getMtime() {
            return mtime;
        }

        public long getAtime() {
            return atime;
        }

        public int getReplication() {
            return replication;
        }

        public String getOwnerName() {
            return ownerName;
        }

        public String getGroupName() {
            return groupName;
        }

        public FsPermission getPerms() {
            return perms;
        }

        /**
         * The full set of ACLs currently associated with this file or directory.
         * May be null if all ACLs were removed.
         */
        public List<AclEntry> getAcls() {
            return acls;
        }

        public List<XAttr> getxAttrs() {
            return xAttrs;
        }

        /**
         * Whether the xAttrs returned by getxAttrs() were removed (as opposed to
         * added).
         */
        public boolean isxAttrsRemoved() {
            return xAttrsRemoved;
        }

    }

    /**
     * Sent when a file, directory, or symlink is renamed.
     */
    public static class RenameEvent extends Event {
        private String srcPath;
        private String dstPath;
        private long timestamp;

        public RenameEvent() {
            super(EventType.RENAME);
        }

        public RenameEvent(org.apache.hadoop.hdfs.inotify.Event.RenameEvent renameEvent) {
            super(EventType.RENAME);
            srcPath = renameEvent.getSrcPath();
            dstPath = renameEvent.getDstPath();
            timestamp = renameEvent.getTimestamp();
        }

        public String getSrcPath() {
            return srcPath;
        }

        public String getDstPath() {
            return dstPath;
        }

        /**
         * The time when this event occurred, in milliseconds since the epoch.
         */
        public long getTimestamp() {
            return timestamp;
        }
    }

    /**
     * Sent when an existing file is opened for append.
     */
    public static class AppendEvent extends Event {
        private String path;
        private boolean newBlock;

        public AppendEvent() {
            super(EventType.APPEND);
        }

        public AppendEvent(org.apache.hadoop.hdfs.inotify.Event.AppendEvent appendEvent) {
            super(EventType.APPEND);
            path = appendEvent.getPath();
            newBlock = appendEvent.toNewBlock();
        }

        public String getPath() {
            return path;
        }

        public boolean toNewBlock() {
            return newBlock;
        }
    }

    /**
     * Sent when a file, directory, or symlink is deleted.
     */
    public static class UnlinkEvent extends Event {
        private String path;
        private long timestamp;

        public UnlinkEvent() {
            super(EventType.UNLINK);
        }

        public UnlinkEvent(org.apache.hadoop.hdfs.inotify.Event.UnlinkEvent unlinkEvent) {
            super(EventType.UNLINK);
            path = unlinkEvent.getPath();
            timestamp = unlinkEvent.getTimestamp();
        }

        public String getPath() {
            return path;
        }

        /**
         * The time when this event occurred, in milliseconds since the epoch.
         */
        public long getTimestamp() {
            return timestamp;
        }
    }
}
